module "network" {
  source = "./modules/network"
  # VPC configuration
  vpc_name               = "main-vpc"
  vpc_cidr               = "10.0.0.0/16"
  vpc_reagion            = "us-east-1"
  public_subnet_count    = 2
  private_subnet_count   = 0
  availability_zones     = ["us-east-1a", "us-east-1b"]
  ngw_tagname            = "ngw"
  igw_tagname            = "igw"
  public_rtable_tagname  = "public-route-table"
  private_rtable_tagname = "private-route-table"
}

module "security" {
  source = "./modules/security"
  # Security group configuration
  vpc_id  = module.network.vpc_id
  sg_name = "allow_ssh_http"

  ingress_rules = [
    {
      from_port   = 22 # SSH
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"] # Warning: Open to the world (restrict in production!)
    },
    {
      from_port   = 80 # HTTP
      to_port     = 80
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  ]
  # Egress rules (outbound traffic) - Added!
  egress_rules = [
    {
      from_port   = 0 # Allow ALL outbound traffic by default
      to_port     = 0
      protocol    = "-1" # All protocols
      cidr_blocks = ["0.0.0.0/0"]
    }
  ]

}

module "compute" {
  source = "./modules/compute"
  # EC2 instance configuration
  ec2_instance = [
    # Instance 1: Public web server
    {
      name               = "web-server",
      ami                = "ami-084568db4383264d4",
      instance_type      = "t2.micro",
      subnet_id          = module.network.public_subnet_ids[0],
      assign_public_ip   = true,                               # <-- Enable public IP
      security_group_ids = [module.security.security_group_id] # Attach SG
      user_data        = file("${path.module}/user.sh"),  # Optional user data script
      key_name = "my-key" # Optional SSH key
    }
  ]

}

resource "local_file" "aws_inventory" {
  filename = "../ansible/inventory/aws"  # Separate AWS inventory
  content = join("\n", [
    "# AUTO-GENERATED BY TERRAFORM - DO NOT EDIT MANUALLY",
    "[aws_ec2]",
    join("\n", [
      for instance in module.compute.instance_public_ip : 
      "${instance} ansible_user=management"  # Directly use the IP string
    ]),
    ""
  ])
  
  # Clean up when Terraform destroys the infrastructure
  provisioner "local-exec" {
    when    = destroy
    command = "rm -f ../ansible/inventory/aws"
  }
}

